1.
The def keyword is used to creat a function.

def odd_num(num) :
    l=[]
    for i in range(1,num+1) :
        if i%2!=0 :
            l.append(i)
    return l
        
num=int(input("Enter your number: "))
odd_num(num)      

2.We learned about two special keywords in Python – *args and **kwargs . These make a Python function flexible so it can accept a variable number of arguments and keyword arguments.

def key(**kwargs):
    for key, value in kwargs.items():
        print(key,value)
    
def num(*args) :
    sum=0
    for i in args :
        sum=sum+i   
    return sum
num(1,2,3,4)
key(Firstname="Sita", Lastname="Sharma", Age=22, Phone=1234567890)

3.An iterator is an object that can be iterated upon, meaning that you can traverse through all the values. Technically, in Python, an iterator is an object which implements the iterator protocol, which consist of the methods __iter__() and __next__() .

The for loop actually creates an iterator object and executes the next() method for each loop.

l=[2, 4, 6, 8, 10, 12, 14,
16, 18, 20]

for i in  l[0:5] :
    print(i)

4. A Python generator function allows you to declare a function that behaves like an iterator, providing a faster and easier way to create iterators. They can be used on an abstract container of data to turn it into an iterable object like lists, dictionaries and strings.

The yield keyword in Python controls the flow of a generator function. This is similar to a return statement used for returning values in Python.

Generator-Function: A generator-function is defined like a normal function, but whenever it needs to generate a value, it does so with the yield keyword rather than return. If the body of a def contains yield, the function automatically becomes a generator function. 


# A generator function that yields 1 for first time,
# 2 second time and 3 third time
def simpleGeneratorFun():
    yield 1           
    yield 2           
    yield 3           
  
# Driver code to check above generator function
for value in simpleGeneratorFun():
    print(value)
Output
1
2
3
Generator-Object : Generator functions return a generator object. Generator objects are used either by calling the next method on the generator object or using the generator object in a “for in” loop (as shown in the above program). 

5.
def prime_num():
    for Number in range (1, 1000):
        count = 0
        for i in range(2, (Number//2 + 1)):
            if(Number % i == 0):
                count = count + 1

        if (count == 0 and Number != 1):
            yield Number

num = prime_num()
for i in range(20):
    print(next(num))

6.num = 20
a=0
b=1
c=0
while num > 0 :
    print(c)
    c=a+b
    a=b
    b=c
    num=num-1
        
7.string = []

for letter in 'pwskills':
    string.append(letter)

print(string)

8.num=int(input("Enter any number:"))
temp=num
rev=0
while(num>0):
    dig=num%10
    rev=rev*10+dig
    num=num//10
if(temp==rev):
    print("The {0} number is palindrome!".format(temp))
else:
    print("Not a palindrome!")